{
  "integration": {
    "rows": {
      "222": {
        "id": 222,
        "path_name": "get_all_customers",
        "description": "This integration will retrieve all customers from the data vault.",
        "run_async": false,
        "http_api": true,
        "before_hook": "with open_vault('data') as vault:\n    customers = vault.get('customers')\n\n    if customers:\n        output.payload = customers\n    else:\n        output.payload = \"There are no customers in the data vault.\"",
        "on_success_hook": null,
        "on_failure_hook": null,
        "finally_hook": null,
        "swagger_response": null,
        "swagger_request": null,
        "tags": []
      },
      "223": {
        "id": 223,
        "path_name": "get_customer",
        "description": "This integration will retrieve a specific customer from the data vault using their Id.",
        "run_async": false,
        "http_api": true,
        "before_hook": "with open_vault('data') as vault:\n    customers = vault.get('customers')\n    customers = [customer for customer in customers if customer.id == input.path.id]\n\n    if customers:\n        output.payload = customers[0]\n    else:\n        output.payload = f'There are no customers with an id of: {input.path.id}'",
        "on_success_hook": null,
        "on_failure_hook": null,
        "finally_hook": null,
        "swagger_response": null,
        "swagger_request": null,
        "tags": []
      },
      "224": {
        "id": 224,
        "path_name": "add_customer",
        "description": "This integration will create a customer in the data vault.",
        "run_async": false,
        "http_api": true,
        "before_hook": null,
        "on_success_hook": null,
        "on_failure_hook": null,
        "finally_hook": null,
        "swagger_response": null,
        "swagger_request": null,
        "tags": []
      },
      "225": {
        "id": 225,
        "path_name": "update_customer",
        "description": "This integration will update a customer's information in the data vault.",
        "run_async": false,
        "http_api": true,
        "before_hook": null,
        "on_success_hook": null,
        "on_failure_hook": null,
        "finally_hook": null,
        "swagger_response": null,
        "swagger_request": null,
        "tags": []
      },
      "226": {
        "id": 226,
        "path_name": "delete_customer",
        "description": "This integration will delete a customer in the data vault.",
        "run_async": false,
        "http_api": true,
        "before_hook": "with open_vault('data') as vault:\n    customers = vault.get('customers')\n    previous_length = len(customers)\n    customers = [customer for customer in customers if customer.id != input.path.id]\n\n    if previous_length != len(customers):\n        vault.update('customers', customers)\n        output.payload = f\"The customer with an id of {input.path.id} has been deleted.\"\n    else:\n        output.payload = f'There are no customers with an id of: {input.path.id}'",
        "on_success_hook": null,
        "on_failure_hook": null,
        "finally_hook": null,
        "swagger_response": null,
        "swagger_request": null,
        "tags": []
      }
    }
  },
  "servicerequest": {
    "rows": {
      "1343": {
        "id": 1343,
        "integration": 222,
        "parent_servicerequest": null,
        "sequence": 1,
        "system": "ECHO",
        "service_name": "N/A",
        "formula_variable": "get_all_customers",
        "call_if": "input.method == \"GET\" and input.fullpath == \"/rest/get_all_customers\"",
        "call_for_each": null,
        "before_prepare_request_hook": null,
        "after_prepare_request_success_hook": null,
        "after_prepare_request_failure_hook": null,
        "before_execute_request_hook": null,
        "after_execute_request_success_hook": null,
        "after_execute_request_failure_hook": null,
        "abort_after_execute_request_failure": true,
        "skip_execute_if_no_sub_requests": false,
        "after_overall_success_hook": null,
        "after_overall_failure_hook": null,
        "message_substitution_name": null,
        "notes": null,
        "tags": []
      },
      "1344": {
        "id": 1344,
        "integration": 222,
        "parent_servicerequest": null,
        "sequence": 2,
        "system": "ECHO",
        "service_name": "N/A",
        "formula_variable": "get_customer",
        "call_if": "input.method == \"GET\" and input.fullpath == \"/rest/get_customer\"",
        "call_for_each": null,
        "before_prepare_request_hook": null,
        "after_prepare_request_success_hook": null,
        "after_prepare_request_failure_hook": null,
        "before_execute_request_hook": null,
        "after_execute_request_success_hook": null,
        "after_execute_request_failure_hook": null,
        "abort_after_execute_request_failure": true,
        "skip_execute_if_no_sub_requests": false,
        "after_overall_success_hook": null,
        "after_overall_failure_hook": null,
        "message_substitution_name": null,
        "notes": null,
        "tags": []
      },
      "1345": {
        "id": 1345,
        "integration": 222,
        "parent_servicerequest": null,
        "sequence": 3,
        "system": "ECHO",
        "service_name": "N/A",
        "formula_variable": "create_customer",
        "call_if": "input.method == \"POST\" and input.fullpath == \"/rest/create_customer\"",
        "call_for_each": null,
        "before_prepare_request_hook": null,
        "after_prepare_request_success_hook": null,
        "after_prepare_request_failure_hook": null,
        "before_execute_request_hook": null,
        "after_execute_request_success_hook": null,
        "after_execute_request_failure_hook": null,
        "abort_after_execute_request_failure": true,
        "skip_execute_if_no_sub_requests": false,
        "after_overall_success_hook": null,
        "after_overall_failure_hook": null,
        "message_substitution_name": null,
        "notes": null,
        "tags": []
      },
      "1346": {
        "id": 1346,
        "integration": 222,
        "parent_servicerequest": null,
        "sequence": 5,
        "system": "ECHO",
        "service_name": "N/A",
        "formula_variable": "delete_customer",
        "call_if": "input.method == \"DELETE\" and input.fullpath == \"/rest/delete_customer\"",
        "call_for_each": null,
        "before_prepare_request_hook": null,
        "after_prepare_request_success_hook": null,
        "after_prepare_request_failure_hook": null,
        "before_execute_request_hook": null,
        "after_execute_request_success_hook": null,
        "after_execute_request_failure_hook": null,
        "abort_after_execute_request_failure": true,
        "skip_execute_if_no_sub_requests": false,
        "after_overall_success_hook": null,
        "after_overall_failure_hook": null,
        "message_substitution_name": null,
        "notes": null,
        "tags": []
      },
      "1347": {
        "id": 1347,
        "integration": 222,
        "parent_servicerequest": null,
        "sequence": 4,
        "system": "ECHO",
        "service_name": "N/A",
        "formula_variable": "update_customer",
        "call_if": "input.method == \"PUT\" and input.fullpath == \"/rest/update_customer\"",
        "call_for_each": null,
        "before_prepare_request_hook": null,
        "after_prepare_request_success_hook": null,
        "after_prepare_request_failure_hook": null,
        "before_execute_request_hook": null,
        "after_execute_request_success_hook": null,
        "after_execute_request_failure_hook": null,
        "abort_after_execute_request_failure": true,
        "skip_execute_if_no_sub_requests": false,
        "after_overall_success_hook": null,
        "after_overall_failure_hook": null,
        "message_substitution_name": null,
        "notes": null,
        "tags": []
      },
      "1348": {
        "id": 1348,
        "integration": 224,
        "parent_servicerequest": null,
        "sequence": 1,
        "system": "ECHO",
        "service_name": "N/A",
        "formula_variable": "insert_customer",
        "call_if": null,
        "call_for_each": null,
        "before_prepare_request_hook": null,
        "after_prepare_request_success_hook": null,
        "after_prepare_request_failure_hook": null,
        "before_execute_request_hook": null,
        "after_execute_request_success_hook": "with open_vault('data') as vault:\n    customers = vault.get('customers')\n    customers.append(insert_customer.response.payload)\n    vault.update('customers', customers)\n    output.payload = { \"id\": insert_customer.response.payload.id }",
        "after_execute_request_failure_hook": null,
        "abort_after_execute_request_failure": true,
        "skip_execute_if_no_sub_requests": false,
        "after_overall_success_hook": null,
        "after_overall_failure_hook": null,
        "message_substitution_name": null,
        "notes": null,
        "tags": []
      },
      "1349": {
        "id": 1349,
        "integration": 225,
        "parent_servicerequest": null,
        "sequence": 1,
        "system": "ECHO",
        "service_name": "N/A",
        "formula_variable": "modify_customer",
        "call_if": null,
        "call_for_each": null,
        "before_prepare_request_hook": null,
        "after_prepare_request_success_hook": null,
        "after_prepare_request_failure_hook": null,
        "before_execute_request_hook": null,
        "after_execute_request_success_hook": "with open_vault('data') as vault:\n    customers = vault.get('customers')\n    customer = [customer for customer in customers if customer.id == input.path.id]\n\n    if customer:\n        customer[0].update(modify_customer.response.payload)\n        vault.update('customers', customers)\n        output.payload = customer[0]\n    else:\n        output.payload = f'There are no customers with an id of: {input.path.id}'",
        "after_execute_request_failure_hook": null,
        "abort_after_execute_request_failure": true,
        "skip_execute_if_no_sub_requests": false,
        "after_overall_success_hook": null,
        "after_overall_failure_hook": null,
        "message_substitution_name": null,
        "notes": null,
        "tags": []
      }
    }
  },
  "fieldmapping": {
    "rows": {
      "47587": {
        "id": 47587,
        "servicerequest": 1348,
        "sequence": 1,
        "field": "id",
        "value": "import uuid; retvalue = uuid.uuid4()",
        "value_type": "str",
        "source_record_type": null,
        "source_field_name": null,
        "target_record_type": null,
        "target_field_name": null,
        "valuemappingset": null,
        "include_if": null,
        "include_for_each": null,
        "nullable": false,
        "message_substitution_name": null,
        "notes": null,
        "approved": false,
        "tags": []
      },
      "47588": {
        "id": 47588,
        "servicerequest": 1348,
        "sequence": 2,
        "field": "firstname",
        "value": "input.payload.firstname",
        "value_type": "str",
        "source_record_type": null,
        "source_field_name": null,
        "target_record_type": null,
        "target_field_name": null,
        "valuemappingset": null,
        "include_if": null,
        "include_for_each": null,
        "nullable": false,
        "message_substitution_name": null,
        "notes": null,
        "approved": false,
        "tags": []
      },
      "47589": {
        "id": 47589,
        "servicerequest": 1348,
        "sequence": 3,
        "field": "lastname",
        "value": "input.payload.lastname",
        "value_type": "str",
        "source_record_type": null,
        "source_field_name": null,
        "target_record_type": null,
        "target_field_name": null,
        "valuemappingset": null,
        "include_if": null,
        "include_for_each": null,
        "nullable": false,
        "message_substitution_name": null,
        "notes": null,
        "approved": false,
        "tags": []
      },
      "47590": {
        "id": 47590,
        "servicerequest": 1348,
        "sequence": 4,
        "field": "birthdate",
        "value": "input.payload.birthdate",
        "value_type": "str",
        "source_record_type": null,
        "source_field_name": null,
        "target_record_type": null,
        "target_field_name": null,
        "valuemappingset": null,
        "include_if": null,
        "include_for_each": null,
        "nullable": false,
        "message_substitution_name": null,
        "notes": null,
        "approved": false,
        "tags": []
      },
      "47591": {
        "id": 47591,
        "servicerequest": 1348,
        "sequence": 5,
        "field": "ssn",
        "value": "input.payload.ssn",
        "value_type": "str",
        "source_record_type": null,
        "source_field_name": null,
        "target_record_type": null,
        "target_field_name": null,
        "valuemappingset": null,
        "include_if": null,
        "include_for_each": null,
        "nullable": false,
        "message_substitution_name": null,
        "notes": null,
        "approved": false,
        "tags": []
      },
      "47592": {
        "id": 47592,
        "servicerequest": 1349,
        "sequence": 4,
        "field": "ssn",
        "value": "input.payload.ssn",
        "value_type": "str",
        "source_record_type": null,
        "source_field_name": null,
        "target_record_type": null,
        "target_field_name": null,
        "valuemappingset": null,
        "include_if": "input.payload.ssn",
        "include_for_each": null,
        "nullable": true,
        "message_substitution_name": null,
        "notes": null,
        "approved": false,
        "tags": []
      },
      "47593": {
        "id": 47593,
        "servicerequest": 1349,
        "sequence": 3,
        "field": "birthdate",
        "value": "input.payload.birthdate",
        "value_type": "str",
        "source_record_type": null,
        "source_field_name": null,
        "target_record_type": null,
        "target_field_name": null,
        "valuemappingset": null,
        "include_if": "input.payload.birthdate",
        "include_for_each": null,
        "nullable": true,
        "message_substitution_name": null,
        "notes": null,
        "approved": false,
        "tags": []
      },
      "47594": {
        "id": 47594,
        "servicerequest": 1349,
        "sequence": 2,
        "field": "lastname",
        "value": "input.payload.lastname",
        "value_type": "str",
        "source_record_type": null,
        "source_field_name": null,
        "target_record_type": null,
        "target_field_name": null,
        "valuemappingset": null,
        "include_if": "input.payload.lastname",
        "include_for_each": null,
        "nullable": true,
        "message_substitution_name": null,
        "notes": null,
        "approved": false,
        "tags": []
      },
      "47595": {
        "id": 47595,
        "servicerequest": 1349,
        "sequence": 1,
        "field": "firstname",
        "value": "input.payload.firstname",
        "value_type": "str",
        "source_record_type": null,
        "source_field_name": null,
        "target_record_type": null,
        "target_field_name": null,
        "valuemappingset": null,
        "include_if": "input.payload.firstname",
        "include_for_each": null,
        "nullable": true,
        "message_substitution_name": null,
        "notes": null,
        "approved": false,
        "tags": []
      }
    }
  }
}